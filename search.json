[{"title":"vue—cli","url":"/2021/12/13/vue%E2%80%94cli/","content":"vue-cli插件使用\n说明:\n\nvue-cli是vue官方提供的脚手架工具包\ngithub: https://github.com/vuejs/vue-cli\n\n\n使用vue-cli快速创建工程化项目\n\n使用基于webpack的简单模板创建项目: webpack-simple_demo\nnpm install -g vue-cli    //下载脚手架包vue init webpack-simple webpack-simple_demo   //下载模板vue init webpack-simple#1.0 webpack-simple_demo   //下载模板cd webpack-simple_democyarn/npm installnpm run dev访问: http://localhost:8080/\n使用基于webpack的完整模板创建项目: webpack_demo\nvue init webpack#1.0 webpack_democd webpack_democyarn/npm installnpm run dev访问: http://localhost:8080/\n\n\n模板项目的结构\n|-- build : webpack相关的配置文件夹(基本不需要修改)  |-- dev-server.js : 通过express启动后台服务器|-- config: webpack相关的配置文件夹(基本不需要修改)  |-- index.js: 指定的后台服务的端口号和静态资源文件夹|-- node_modules|-- src : 源码文件夹  |-- components: vue组件及其相关资源文件夹  |-- app.vue: 应用根主组件  |-- main.js: 应用入口js|-- static: 静态资源文件夹|-- .babelrc: babel的配置文件|-- .editorconfig: 通过编辑器的编码/格式进行一定的配置|-- .eslintignore: eslint检查忽略的配置|-- .eslintrc.js: eslint检查的配置|-- .gitignore: git版本管制忽略的配置|-- index.html: 主页面文件|-- package.json: 应用包配置文件 |-- README.md: 应用描述说明的readme文件\n编码测试与打包发布项目\n\n编码测试:\nnpm run dev\n访问: http://localhost:8080\n编码, 自动编译打包(HMR), 查看效果\n\n\n打包发布\nnpm run build\nnpm install -g pushstate-server\npushstate-server dist\n访问: http://localhost:9000\n\n\n\n\n\n"},{"title":"vue","url":"/2021/12/13/vue/","content":"\nVue.js是什么?\n\n一位华裔前Google工程师开发的前端js库\n一个MVVM的框架\n核心概念\n数据绑定\n组件\n\n\n与angular.js类似的是声明式开发，但性能高于angular，体积小很多, 比较适合移动端开发\n它本身不是全能框架, 只关注UI, 如果需要router/ajax, 可以使用对应插件或使用别的库来实现\n\n\n基本使用\n\n引入vue.js\n创建Vue对象(vm), 指定选项(配置)对象\nel : 指定dom标签容器的选择器\ndata : 指定初始化状态属性数据的对象对象/函数(返回一个对象)\n\n\n\n\n页面中\n使用v-model: 实现双向数据绑定\n使用: 显示数据\n\n\n\n\nVue对象的选项\n\nel\n\n指定dom标签容器的选择器\nVue就会管理对应的标签及其子标签\n\n\ndata\n\n对象或函数类型\n指定初始化状态属性数据的对象\nvue对象可以直接访问其属性\n页面中可以直接访问使用\n数据代理: 由vm对象来代理对data中所有属性的操作(读/写)\n\n\nmethods\n\n包含多个方法的对象\n供页面中的事件指令来绑定回调\n回调函数默认有event参数, 但也可以指定自己的参数\n所有的方法由vue对象来调用, 访问data中的属性直接使用this.xxx\n\n\ncomputed\n\n包含多个方法的对象\n对状态属性进行计算返回一个新的数据, 供页面获取显示\n一般情况下是相当于是一个只读的属性\n利用set/get方法来实现属性数据的计算读取, 同时监视属性数据的变化\n如何给对象定义get/set属性\n在创建对象时指定: get name () {return xxx} / set name (value) {}\n对象创建之后指定: Object.defineProperty(obj, age, {get(){}, set(value){}})\n\n\n\n\nwatch\n\nVue.$watch()\n\n包含多个属性监视的对象\n\n分为一般监视和深度监视\n&#x27;xxx&#x27; : &#123;  deep : true,  handler : fun(value)&#125;\n\n\n\n\n扩展数组\n\n对数组的常用方法进行了包装(用于数据绑定)\n$remove(item) : 删除数组中对应的元素\n$set(index, ele) : 给数组中指定下标指定对应的元素 \n\n\n过渡\n\n利用vue去操控css的动画\n\ntransition/animation\n\n使用\n\n\n定义css样式\n\n.xxx-transition: 在其中去指定transition/animation\n.xxx-enter\n.xxx-leave\n\n\n\n\n动画的钩子函数\n\n\n\n生命周期\n\nvm/组件对象\n生命周期图\n主要的生命周期函数(钩子)\ncreated(): 启动异步任务(发送ajax请求, 启动定时器)\nbeforeDestroy(): 做一些收尾的工作\n\n\n\n\n页面指令\n\nv-text/v-html: 指定标签体\nv-text : 当作纯文本\nv-html : 将value作为html标签来解析\n\n\nv-if v-else v-show\nv-if : 如果vlaue为true, 当前标签会输出在页面中\nv-else : 与v-if一起使用, 如果value为false, 将当前标签输出到页面中\nv-show: 就会在标签中添加display样式, 如果vlaue为true, display=block, 否则是none\n\n\nv-for : 遍历\n遍历数组 : v-for=”person in persons”   $index\n遍历对象 : v-for=”value in person”   $key\n\n\nv-on : 绑定事件监听\nv-on:事件名, 可以缩写为: @事件名\n监视具体的按键: @keyup.keyCode   @keyup.enter\n阻止事件的冒泡和事件默认行为: @click.stop   @click.prevent\n隐含对象: $event\n\n\nv-bind : 强制绑定解析表达式  \n很多属性值是不支持表达式的, 就可以使用v-bind\n可以缩写为:  :id=’name’\n:class\n:class=”a”\n:class=”{classA : isA, classB : isB}”\n:class=”[classA, classB]”\n\n\n:style:style=”{color : color}”\n\n\nv-model\n双向数据绑定\n\n\nv-el : 标识某个标签\nv-el:xxx\n读取得到标签对象: this.$els.xxx\n\n\n\n\n过滤器\n\n内置\n\ncapitalize : 首字母大小\n\nuppercase : 全部大写\n\nlowercase : 全部小写\n\ncurrency : 货币化\n\npluralize : 单数/复数处理\n\njson : json格式化\n\nlimitBy : 限定数组的部分元素(下标)\n\nfilterBy : 限定数组的部分元素(值)\n\norderBy : 对数组进行排序\n\n\n\n自定义\n\n全局过滤器\nVue.filter(&#x27;过滤器名&#x27;, function(value, xxx, yyy) &#123;  //处理逻辑  return result;&#125;)\n局部过滤器\nnew Vue(&#123;  filters : &#123;    &#x27;过滤器名&#x27; : function(value, xxx, yyy) &#123;        //处理逻辑        return result;    &#125;  &#125;&#125;)\n\n\n指令\n\n内置\n\nv:text : 更新元素的 textContent\nv-html : 更新元素的 innerHTML\nv-if : 如果为true, 当前标签才会输出到页面\nv-else: 如果为false, 当前标签才会输出到页面\nv-show : 通过控制display样式来控制显示/隐藏\nv-for : 遍历数组/对象\nv-on : 绑定事件监听, 一般简写为@\nv-bind : 强制绑定解析表达式, 可以省略v-bind\nv-model : 双向数据绑定\nv-el : 为某个元素注册一个唯一标识, vue对象通过$els属性访问这个元素对象\nv-cloak : 使用它防止闪现表达式, 与css配合: [v-cloak] { display: none }\n\n\n自定义\n\n注册全局指令\nVue.directive(&#x27;my-directive&#x27;, function(value)&#123;  this.el.innerHTML = value.toUpperCase();&#125;)\n注册局部指令\ndirectives : &#123;  &#x27;my-directive&#x27; : function(value) &#123;    this.el.innerHTML = value;  &#125;&#125;\n使用指令:\nv-my-directive=&#x27;xxx&#x27;\n\n\n\n\n\n"},{"title":"markdown使用指南","url":"/2021/12/11/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","content":"markdown使用指南\n\n\n\n1.markdown的基础格式\n\n\n1.1换行\n\n\n\n\n通过结尾添加两个空格来形成段落，或者p标签\n\n这个指南实在是太详细啦！我要认真学习！！\n\n\n使用空行来进行换行  或者是&lt;br&gt;\n\n\n1.2字体\n\n\n\n*斜体文字* 或 _斜体文字_  效果为  斜体\n**粗体文字** 或__粗体文字__ 效果为  粗体\n***粗斜体文字*** 或 ___粗体文字___ 效果为  粗斜体\n\n\n1.3分割线\n\n\n\n通过在一行中三个以上的星号，减号，底线来创建分隔线并不能有其他东西，也能在期间插入空格，效果如  ***\n\n上面的就是分隔线\n\n\n\n1.4删除线\n\n\n\n文字两端用两个波浪线夹住就能添加删除线，如:  ~~delete~~\ndelete\n\n\n\n1.5块引用\n\n\n\n使用&gt;能创建块引用(其实就是缩进里的进)，可以嵌套使用，如:\n\n\n一个&gt;\n\n两个&gt;\n\n\n\n可以嵌套下面所述的清单\n\n\n\n\n1.6清单\n\n\n\n无序列表，其中使用-，*，+都可以\n\n\n    \n        Markdown\n        HTML\n        输出结果\n    \n    \n        \n            - First item- Second item- Third item- Fourth item\n        \n        &lt;ul>\n            &emsp;&lt;li>First item&lt;/li>\n            &emsp;&lt;li>Second item&lt;/li>\n            &emsp;&lt;li>Third item&lt;/li>\n            &emsp;&lt;li>Fourth item&lt;/li>\n            &lt;/ul>\n        \n        \n            First item\n            Second item\n            Third item\n            Fourth item\n            \n    \n        \n            - First item- Second item- Third item&emsp;- Indented item&emsp;- Indented item- Fourth item\n        \n        \n            &lt;ul>\n                &emsp;&lt;li>First item\n                &emsp;&lt;li>Second item\n                &emsp;&lt;li>Third item\n                    &emsp;&emsp;&lt;ul>\n                        &emsp;&emsp;&emsp;&lt;li>Indented item\n                        &emsp;&emsp;&emsp;&lt;li>Indented item\n                    &emsp;&emsp;&lt;/ul>\n                &emsp;&lt;/li>\n                &emsp;&lt;li>Fourth item\n            &lt;/ul>\n        \n        \n            \n                First item\n                Second item\n                Third item\n                    \n                        Indented item\n                        Indented item\n                    \n                \n                Fourth item\n            \n        \n\n\n\n\n有序列表即在前面添加数字和句号，数字不需要排序\n\n\n    \n        Markdown\n        HTML\n        输出结果\n    \n    \n        1. First item\n            8. Second item\n            3. Third item\n            5. Fourth item\n        \n        &lt;ol>\n            &emsp;&lt;li>First item&lt;/li>\n            &emsp;&lt;li>Second item&lt;/li>\n            &emsp;&lt;li>Third item&lt;/li>\n            &emsp;&lt;li>Fourth item&lt;/li>\n            &lt;/ol>\n        \n        \n            \n                First item\n                Second item\n                Third item\n                Fourth item\n            \n        \n    \n\n\n\n\n在markdown提供的列表中似乎会将输入其中的值默认转义插入不会解析其中的语句，因此像想在列表中插入样式建议还是使用html的原生制表语法\n\n\n1.7列表间添加元素\n\n\n\n要在保留列表连续性的同时在列表中添加另一个元素，请将该元素缩进四个空格或一个制表符\n\n\n* this is first sentence\n* this is second\n    > this is insert one\n* this is third\n\n\n输出为以下结果\n\nThis is the first list item.\n\nHere’s the second list item.\n\nA blockquote would look great below the second list item.\n\n\nAnd here’s the third list item.\n\n\n\n1.8代码块\n\n\n\n代码块通常缩进四个空格或一个制表符。当它们在列表中时，将它们缩进八个空格或两个选项卡如下图所示\n\n1.  Open the file.\n2.  Find the following code block on line 21:\n\n        &lt;html&gt;\n          &lt;head&gt;\n            &lt;title&gt;Test&lt;/title&gt;\n          &lt;/head&gt;\n\n3.  Update the title to match the name of your website.\n\n以下为输出结果\n\nOpen the file.\n\nFind the following code block on line 21:\n &lt;html&gt;\n   &lt;head&gt;\n     &lt;title&gt;Test&lt;/title&gt;\n   &lt;/head&gt;\n\n\nUpdate the title to match the name of your website.\n\n\n\n1.9图片\n\nnull\n\n\n"},{"title":"vue—resource","url":"/2021/12/13/vue%E2%80%94resource/","content":"vue-resource插件使用\n说明:\n\nvue-resource是非官方提供的ajax插件, 受众广\ngithub: https://github.com/pagekit/vue-resource\nvue官方开始推荐使用axios作为ajax库\n下载: npm install vue-resource –save\n\n\n基本使用编码\n//引入模块import VueResource from &#x27;vue-resource&#x27;//使用插件Vue.use(VueResource) //通过vue组件对象发送ajax请求this.$http.get(&#x27;/someUrl&#x27;).then((response) =&gt; &#123;  // success callback  console.log(response.body) //返回结果数据&#125;, (response) =&gt; &#123;  // error callback  console.log(response.statusText) //错误信息&#125;);\n详细用法(查看在线文档)\nhttps://github.com/pagekit/vue-resource/blob/develop/docs/http.md\n使用axios发送ajax请求\n\naxios在线文档: https://github.com/mzabriskie/axios\n\n下载axios: npm install axios –save\n\n使用:\nimport axios from &#x27;axios&#x27;axios.get(url)  .then((response) =&gt; &#123;    console.log(response)  &#125;)\n测试接口: https://api.github.com/users/octocat/gists\n\n\n\n\n"},{"title":"welcome","url":"/2021/12/10/welcome/","content":"欢迎来到我的博客\n\n目前博客尚且在维护之中\n您可以通过：\n\n y546889947\n\n或者\n  \n\n    546889947\n\n\n来联系我\n"}]